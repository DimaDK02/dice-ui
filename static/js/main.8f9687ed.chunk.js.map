{"version":3,"sources":["reportWebVitals.ts","Utils.ts","components/utils/ErrorBoundary.tsx","components/App/App.tsx","components/utils/Loader.tsx","core/trackers/tracker-utils.ts","core/trackers/LocalTracker.ts","core/trackers/trackers.ts","constants.ts","core/components/WithUser.tsx","components/AppWrapper/AppWrapper.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","Utils","isProductionMode","process","ErrorBoundary","children","fallback","error","componentStack","resetError","message","onClick","App","loadingUser","popout","useState","loadingTooLong","setLoadingTooLong","activeStory","activePanel","useEffect","timerId","window","setTimeout","clearTimeout","popoutToRender","tabbar","text","selected","Error","id","tracker","LocalTracker","init","console","log","identify","vkId","reachGoal","name","params","AUTOMATIC_OPERATIONS","registeredTrackers","call","method","args","forEach","includes","fn","Themes","trackers","WithUser","user","setUser","setLoadingUser","a","isInitialRequest","bridge","send","vkUser","fetchUser","AppWrapper","setPopout","bright_light","theme","setTheme","subscribe","detail","type","data","scheme","schemeAttribute","document","createAttribute","value","body","attributes","setNamedItem","Sentry","dsn","beforeSend","event","hint","exception","errorMessage","originalException","actions","mode","title","autoclose","onClose","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8f9687ed.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","export class Utils {\n  static isProductionMode = process.env.NODE_ENV === 'production'\n}\n","import * as Sentry from '@sentry/react'\nimport { Button } from '@vkontakte/vkui'\nimport { Utils } from '../../Utils'\n\ntype Props = {\n  children: JSX.Element\n}\n\n/**\n * Component catches only errors in rendering phase and lifecycle\n * Errors in click and async handlers need to be caught and rendered separately\n */\nexport function ErrorBoundary({ children }: Props): JSX.Element {\n  if (!Utils.isProductionMode) return children\n\n  return (\n    <Sentry.ErrorBoundary\n      fallback={({ error, componentStack, resetError }) => (\n        <>\n          <div>Ошибка отрисовки:</div>\n          <p>{error.message}</p>\n          <p>{componentStack}</p>\n          <Button onClick={resetError}>Попробовать еще раз</Button>\n        </>\n      )}\n    >\n      {children}\n    </Sentry.ErrorBoundary>\n  )\n}\n","import {\n  Epic,\n  Panel,\n  ScreenSpinner,\n  Tabbar,\n  TabbarItem,\n  View,\n} from '@vkontakte/vkui'\nimport { useEffect, useState } from 'react'\nimport { DELAY_BEFORE_LOADER } from '../utils/Loader'\n\ntype Props = {\n  loadingUser: boolean\n  popout: JSX.Element | null\n}\n\nexport function App({ loadingUser, popout }: Props): JSX.Element {\n  const [loadingTooLong, setLoadingTooLong] = useState(false)\n  const [activeStory, setActiveStory] = useState('dice')\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [activePanel, setActivePanel] = useState('home')\n\n  useEffect(() => {\n    let timerId: number\n    if (loadingUser)\n      timerId = window.setTimeout(() => {\n        setLoadingTooLong(true)\n      }, DELAY_BEFORE_LOADER)\n    else setLoadingTooLong(false)\n    return () => {\n      clearTimeout(timerId)\n    }\n  }, [loadingUser])\n\n  let popoutToRender: JSX.Element | null = null\n  if (popout) popoutToRender = popout\n  else if (loadingUser && loadingTooLong) popoutToRender = <ScreenSpinner />\n  return (\n    <Epic\n      activeStory={activeStory}\n      tabbar={\n        <Tabbar>\n          <TabbarItem\n            text=\"Главная\"\n            selected={activeStory === 'dice'}\n            onClick={() => {\n              throw new Error('test')\n              setActiveStory('game')\n            }}\n          />\n        </Tabbar>\n      }\n    >\n      <View id=\"dice\" activePanel={activePanel} popout={popoutToRender}>\n        <Panel id=\"home\">main</Panel>\n      </View>\n    </Epic>\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { PanelSpinner } from '@vkontakte/vkui'\n\ntype Props = {\n  delay?: number\n  render?(): JSX.Element | null\n}\n\nexport const DELAY_BEFORE_LOADER = 200\n\nfunction Loader({\n  delay = DELAY_BEFORE_LOADER,\n  render = () => <PanelSpinner size=\"large\" />,\n}: Props): JSX.Element | null {\n  const [pastDelay, setPastDelay] = useState(false)\n  useEffect(() => {\n    const timerId = setTimeout(() => {\n      setPastDelay(true)\n    }, delay)\n    return () => {\n      clearTimeout(timerId)\n    }\n  }, [delay])\n\n  if (pastDelay) return render()\n  return null\n}\n\nexport default Loader\n","export interface TrackerInterface {\n  AUTOMATIC_OPERATIONS: Array<string>\n  init: () => Promise<void>\n  identify: (id: number, vkId: number) => Promise<void>\n  reachGoal: (name: string, params?: Record<string, unknown>) => Promise<void>\n}\n\ntype Optional<T, K extends keyof T> = Pick<Partial<T>, K> & Omit<T, K>\n\ntype TrackerInput = Optional<TrackerInterface, 'AUTOMATIC_OPERATIONS'>\n\nexport const createTracker = (tracker: TrackerInput): TrackerInterface => ({\n  AUTOMATIC_OPERATIONS: ['*'],\n  ...tracker,\n})\n","/* eslint-disable no-console */\nimport { createTracker, TrackerInterface } from './tracker-utils'\n\nexport const LocalTracker: TrackerInterface = createTracker({\n  async init(): Promise<void> {\n    console.log('Init tracker')\n  },\n\n  async identify(vkId: number): Promise<void> {\n    console.log(`linked session with vkId ${vkId}`)\n  },\n\n  async reachGoal(\n    name: string,\n    params?: Record<string, unknown>\n  ): Promise<void> {\n    if (!params) console.log(`Reach goal ${name}`)\n    else console.log(`Reach goal ${name} with params`, params)\n  },\n})\n","import { Utils } from '../../Utils'\nimport { LocalTracker } from './LocalTracker'\n\nconst registeredTrackers = Utils.isProductionMode ? [] : [LocalTracker]\n\nfunction call(method: string, ...args: Array<unknown>) {\n  registeredTrackers.forEach((tracker) => {\n    if (\n      tracker.AUTOMATIC_OPERATIONS[0] === '*' ||\n      tracker.AUTOMATIC_OPERATIONS.includes(method)\n    ) {\n      // @ts-ignore\n      const fn = tracker[method]\n      if (typeof fn !== 'function') {\n        throw new Error(`Invalid tracker method: ${method}`)\n      }\n      fn(...args)\n    }\n  })\n}\n\nexport const trackers = {\n  identify(vkId: number): void {\n    call('identify', vkId)\n  },\n\n  init(): void {\n    call('init')\n  },\n\n  reachGoal(name: string, params?: Record<string, unknown>): void {\n    call('reachGoal', name, params)\n  },\n}\n","export enum Themes {\n  bright_light = 'bright_light',\n  space_gray = 'space_gray',\n}\n","import { useEffect, useState } from 'react'\nimport { trackers } from '../trackers/trackers'\nimport bridge, { UserInfo } from '@vkontakte/vk-bridge'\n\ntype Props = {\n  children({\n    user,\n    loadingUser,\n  }: {\n    user: UserInfo | null\n    loadingUser: boolean\n  }): JSX.Element\n}\n\nexport function WithUser({ children }: Props): JSX.Element {\n  const [user, setUser] = useState<UserInfo | null>(null)\n  const [loadingUser, setLoadingUser] = useState(false)\n\n  async function fetchUser(isInitialRequest = false) {\n    setLoadingUser(true)\n    try {\n      const vkUser = await bridge.send('VKWebAppGetUserInfo')\n      setUser(vkUser)\n      if (isInitialRequest) {\n        trackers.identify(vkUser.id)\n      }\n    } finally {\n      setLoadingUser(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchUser(true)\n  }, [])\n\n  return children({\n    user,\n    loadingUser,\n  })\n}\n","import { useEffect, useState } from 'react'\nimport * as Sentry from '@sentry/react'\nimport { Alert, AppRoot } from '@vkontakte/vkui'\nimport bridge from '@vkontakte/vk-bridge'\nimport { Utils } from '../../Utils'\nimport { App } from '../App/App'\nimport { WithUser } from '../../core/components/WithUser'\nimport { trackers } from '../../core/trackers/trackers'\nimport { Themes } from '../../constants'\nimport '@vkontakte/vkui/dist/vkui.css'\n\nexport function AppWrapper(): JSX.Element {\n  const [popout, setPopout] = useState<JSX.Element | null>(null)\n  const [theme, setTheme] = useState<Themes>(Themes.bright_light)\n\n  useEffect(() => {\n    bridge.send('VKWebAppInit')\n    bridge.subscribe(({ detail: { type, data } }) => {\n      if (type === 'VKWebAppUpdateConfig') {\n        // @ts-ignore\n        setTheme(data.scheme || Themes.bright_light)\n      }\n    })\n  }, [])\n\n  useEffect(() => {\n    const schemeAttribute = document.createAttribute('scheme')\n    schemeAttribute.value = theme\n    document.body.attributes.setNamedItem(schemeAttribute)\n  }, [theme])\n\n  useEffect(() => {\n    // eslint-disable-next-line no-console\n    console.log('before if')\n    if (Utils.isProductionMode) {\n      // eslint-disable-next-line no-console\n      console.log('dsn:', process.env.REACT_APP_SENTRY_DSN)\n      Sentry.init({\n        dsn: process.env.REACT_APP_SENTRY_DSN,\n        beforeSend(event, hint) {\n          if (event.exception) {\n            const errorMessage =\n              hint &&\n              hint.originalException &&\n              hint.originalException instanceof Error &&\n              hint.originalException.message\n                ? hint.originalException.message\n                : ''\n            setPopout(\n              <Alert\n                actions={[\n                  {\n                    mode: 'default',\n                    title: 'ОК',\n                    autoclose: true,\n                  },\n                ]}\n                onClose={() => setPopout(null)}\n              >\n                <h3>Возникла ошибка =(</h3>\n                {errorMessage && <p>{errorMessage}</p>}\n                <p>Попробуй еще раз</p>\n              </Alert>\n            )\n          }\n          return event\n        },\n      })\n    }\n    trackers.init()\n    trackers.reachGoal('open app')\n  }, [])\n\n  return (\n    <AppRoot>\n      <WithUser>\n        {({ loadingUser }) => {\n          return <App loadingUser={loadingUser} popout={popout} />\n        }}\n      </WithUser>\n    </AppRoot>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport reportWebVitals from './reportWebVitals'\nimport { ErrorBoundary } from './components/utils/ErrorBoundary'\nimport { AppWrapper } from './components/AppWrapper/AppWrapper'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ErrorBoundary>\n      <AppWrapper />\n    </ErrorBoundary>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}